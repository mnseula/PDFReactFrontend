PDF Processor App - Production Docker Setup
This guide will help you set up and run the PDF Processor app in production mode using Docker and Nginx as a reverse proxy.

Prerequisites
Before you begin, make sure you have the following installed on your system:

Docker
Docker Compose
Quick Production Setup
For a quick production deployment, use the included deploy script:

bash
# Make the script executable
chmod +x deploy-production.sh

# Run the deployment script
./deploy-production.sh
The script will:

Set up the necessary directories
Build the Docker images
Start the containers in production mode
Configure Nginx as a reverse proxy
Once deployed, the app will be accessible at:

http://localhost
Manual Setup
If you prefer to set things up manually, follow these steps:

1. Build the Docker images
bash
docker-compose build
2. Run the application
bash
docker-compose up -d
3. Check the status
bash
docker-compose ps
Container Architecture
This setup includes two containers:

pdf-processor-app - Runs the Expo web app in production mode on port 8081
nginx - Acts as a reverse proxy, forwarding requests from port 80 to the app container
The Nginx configuration includes:

Proper HTTP headers for security
Gzip compression for faster loading
Handling of WebSocket connections for real-time features
Error page configuration
Configuration Files
Dockerfile - Builds the application for production
docker-compose.yml - Configures both the app and Nginx containers
nginx.conf - Sets up the Nginx reverse proxy
Logs and Troubleshooting
To view logs from both containers:

bash
docker-compose logs -f
To restart the services:

bash
docker-compose restart
To stop all services:

bash
docker-compose down
Customization
Changing the Port
If you need to use a different port than 80 for the web interface, modify the ports section in docker-compose.yml:

yaml
nginx:
  ports:
    - "8080:80"  # Change 8080 to your desired port
SSL/HTTPS Configuration
To enable HTTPS, you'll need to modify the Nginx configuration to include SSL certificates. Add the following to nginx.conf:

nginx
server {
    listen 443 ssl;
    server_name localhost;
    
    ssl_certificate /etc/nginx/ssl/cert.pem;
    ssl_certificate_key /etc/nginx/ssl/key.pem;
    
    # Rest of your configuration...
}
Then update docker-compose.yml to mount your certificates:

yaml
nginx:
  volumes:
    - ./nginx.conf:/etc/nginx/conf.d/default.conf
    - ./ssl:/etc/nginx/ssl
Production Considerations
Set up proper domain names in nginx.conf
Configure proper SSL certificates for HTTPS
Set up proper monitoring and logging
Configure firewall rules to only expose necessary ports
Consider setting up a CI/CD pipeline for automated deployments
